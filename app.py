# app.py
from flask import Flask, request, jsonify
import os, re, random
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from difflib import SequenceMatcher

app = Flask(__name__)

# ========= Google Sheets =========
scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
# ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå credentials.json ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà root ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (‡∏≠‡∏¢‡πà‡∏≤ public)
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
gs_client = gspread.authorize(creds)

SHEET_ID = os.getenv("GOOGLE_SHEET_ID")  # ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Render
SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "FAQ")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó‡πÑ‡∏î‡πâ (default=FAQ)
sheet = gs_client.open_by_key(SHEET_ID).worksheet(SHEET_NAME)  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ | ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö | ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î

# ========= ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ =========
FUZZY_THRESHOLD = float(os.getenv("FUZZY_THRESHOLD", "0.72"))  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î
MAX_LIST = int(os.getenv("MAX_LIST", "5"))  # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡∏µ‡πà‡∏ä‡∏¥‡πâ‡∏ô/‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô

# ========= ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ =========
def norm(s: str) -> str:
    return re.sub(r"\s+", "", str(s or "")).lower()

def contains(text: str, kw: str) -> bool:
    return kw.lower() in text.lower() or norm(kw) in norm(text)

def similar(a: str, b: str) -> float:
    return SequenceMatcher(None, norm(a), norm(b)).ratio()

def tokenize(text: str):
    # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢+‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏û‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏ö‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≥‡πÑ‡∏î‡πâ)
    # ‡πÄ‡∏ô‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏¢ ‚Äú‡∏õ‡∏•‡∏±‡∏Å‡πÑ‡∏ü‡∏≠‡∏±‡∏â‡∏£‡∏≠‡∏¢‡∏∞‚Äù ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ ‚Äú‡∏õ‡∏•‡∏±‡πä‡∏Å‡πÑ‡∏ü‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‚Äù
    return [t for t in re.split(r"[\s,.;:!?/|()\[\]{}]+", text.lower()) if t]

# ========= ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö =========
TEMPLATES_SINGLE = [
    "‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üôå ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {name} ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ {link}",
    "‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö üòä {name} ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üëâ {link}",
    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à {name} ‡∏Ñ‡∏£‡∏±‡∏ö ‚ú® ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ {link}"
]

TEMPLATES_MULTI_HEADER = [
    "üìå ‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üòä",
    "‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö üôå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢:",
    "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏û‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‚ú®"
]

FOLLOWUP_ASK = [
    "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö üòä ‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏´‡∏°‡πâ‡∏≠‡∏´‡∏∏‡∏á‡∏Ç‡πâ‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡∏±‡πä‡∏Å‡πÑ‡∏ü?",
    "‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏ï‡∏¥‡∏î‡∏ú‡∏ô‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡πÇ‡∏à‡πä‡∏Å‡∏ñ‡∏∏‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôè",
    "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏´‡∏≤‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üòä"
]

COMMON_REPLIES = [
    # (‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö)
    ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üôè ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"),
    ("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì", "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö üòä ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"),
    ("‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à", "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏° üôå ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏ö‡∏≠‡∏Å‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"),
    ("‡πÇ‡∏≠‡πÄ‡∏Ñ", "‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏Ñ‡∏£‡∏±‡∏ö ‚ú® ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏ó‡∏±‡∏Å‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"),
    ("ok", "‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏° üôå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏ö‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"),
]

def reply_manychat(text: str):
    return jsonify({"content": {"messages": [{"text": text}]}}), 200

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Conversational FAQ Bot is running", 200

@app.route("/manychat", methods=["POST"])
def manychat():
    try:
        data = request.get_json(silent=True) or {}
        user_message = (data.get("message") or "").strip()
        if not user_message:
            return reply_manychat("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

        # ---------- 1) ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ----------
        for key, val in COMMON_REPLIES:
            if key in user_message:
                return reply_manychat(val)

        # ---------- 2) ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡∏ó ----------
        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ | ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö | ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
        records = sheet.get_all_records()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πá‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        # products = [{"name": ..., "link": ..., "keywords": [...]}]
        products = []
        for row in records:
            name = str(row.get("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "")).strip()
            link = str(row.get("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", "")).strip()
            kw_raw = str(row.get("‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î", "")).strip()
            kws = [k.strip() for k in kw_raw.split(",") if k.strip()]
            # ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
            keyset = list(set(kws + ([name] if name else [])))
            products.append({"name": name, "link": link, "keywords": keyset})

        u = user_message
        tokens = tokenize(user_message)

        # ---------- 3) ‡∏´‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ----------
        # matched_products: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ä‡∏∑‡πà‡∏≠)
        matched_products = []

        for p in products:
            # ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠/‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ "‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Ñ‡πâ‡∏≤" ‡∏Å‡∏±‡∏ö user_message ‚Üí match
            best_score = 0.0
            direct = False
            for kw in p["keywords"]:
                if not kw:
                    continue
                if contains(u, kw):
                    direct = True
                    best_score = 1.0
                    break
                # fuzzy ‡∏Å‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ ‡πÜ ‡∏Å‡πà‡∏≠‡∏ô
                for t in reversed(tokens):
                    sc = similar(t, kw)
                    if sc > best_score:
                        best_score = sc
            if direct or best_score >= FUZZY_THRESHOLD:
                # ‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
                if not any(x["name"] == p["name"] for x in matched_products):
                    matched_products.append(p)

        # ---------- 4) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏•‡∏¢ ----------
        if len(matched_products) == 0:
            return reply_manychat(random.choice(FOLLOWUP_ASK))

        # ---------- 5) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ 1 ‡∏ä‡∏¥‡πâ‡∏ô ‚Üí ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå ----------
        if len(matched_products) == 1:
            p = matched_products[0]
            name = p["name"] or "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ"
            link = p["link"] or ""
            if link:
                text = random.choice(TEMPLATES_SINGLE).format(name=name, link=link)
            else:
                text = f"{name} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö üòä ‡∏™‡∏ô‡πÉ‡∏à‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ö‡∏≠‡∏Å‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
            return reply_manychat(text)

        # ---------- 6) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏¥‡πâ‡∏ô ----------
        # ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° "‡∏Ñ‡∏≥‡∏Å‡∏ß‡πâ‡∏≤‡∏á" ‡∏ó‡∏µ‡πà‡πÇ‡∏ú‡∏•‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô '‡∏õ‡∏•‡∏±‡πä‡∏Å', '‡πÑ‡∏ü', '‡πÇ‡∏à‡πä‡∏Å'
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢: ‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà match ‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡∏´‡∏≤ keyword ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢
        # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Å‡πá‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        groups = {}  # key -> list of products
        any_grouped = False
        for p in matched_products:
            placed = False
            for kw in p["keywords"]:
                if kw and contains(u, kw):
                    groups.setdefault(kw, [])
                    # ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
                    if not any(x["name"] == p["name"] for x in groups[kw]):
                        groups[kw].append(p)
                        placed = True
                        any_grouped = True
                        break
            if not placed:
                groups.setdefault("_misc", [])
                if not any(x["name"] == p["name"] for x in groups["_misc"]):
                    groups["_misc"].append(p)

        lines = [random.choice(TEMPLATES_MULTI_HEADER)]
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        for kw, items in groups.items():
            # ‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
            items = items[:MAX_LIST]
            if kw == "_misc":
                lines.append("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:")
            else:
                lines.append(f'‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‚Äú{kw}‚Äù ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:')
            for it in items:
                n = it["name"] or "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                l = it["link"] or ""
                if l:
                    lines.append(f"- {n} üëâ {l}")
                else:
                    lines.append(f"- {n}")

            lines.append("")  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î

        lines.append("‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üòä")
        return reply_manychat("\n".join([ln for ln in lines if ln.strip() != ""]))

    except Exception as e:
        return jsonify({
            "content": {"messages": [{"text": f"‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}]}
        }), 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
