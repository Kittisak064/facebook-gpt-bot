from flask import Flask, request, jsonify
import os
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from difflib import SequenceMatcher
import openai

app = Flask(__name__)

# ==== OpenAI (‡πÉ‡∏ä‡πâ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 0.28.0) ====
openai.api_key = os.getenv("OPENAI_API_KEY")

# ==== Google Sheets ====
scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
gs_client = gspread.authorize(creds)

SHEET_ID = os.getenv("GOOGLE_SHEET_ID")  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Render
sheet = gs_client.open_by_key(SHEET_ID).worksheet("FAQ")  # ‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ | ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö | ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î


# ---------- Utils ----------
def _norm(s: str) -> str:
    # ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠ normalize ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡∏á‡πà‡∏≤‡∏¢
    return re.sub(r"\s+", "", str(s)).lower()


def _similar(a: str, b: str) -> float:
    return SequenceMatcher(None, a, b).ratio()


def _rewrite_with_gpt(user_message: str, base_reply: str) -> str:
    """
    ‡πÉ‡∏´‡πâ GPT ‡∏£‡∏µ‡πÑ‡∏£‡∏ó‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏°‡∏µ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢) ‡πÇ‡∏î‡∏¢‡∏¢‡∏∂‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å base_reply
    """
    prompt = f"""
‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå: "{user_message}"
‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö: "{base_reply}"

‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå:
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö 1‚Äì3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
- ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏°‡∏µ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
- ‡∏¢‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠/‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà "‡∏•‡∏¥‡∏á‡∏Å‡πå" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏≠‡∏¢‡πà‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ [] ‡∏´‡∏£‡∏∑‡∏≠ {{}}
- ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏î‡∏π/‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå
"""
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå ‡∏û‡∏π‡∏î‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå"},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=220
        )
        text = resp["choices"][0]["message"]["content"].strip()
        # ‡∏Å‡∏±‡∏ô‡πÄ‡∏ú‡∏∑‡πà‡∏≠ GPT ‡πÄ‡∏ú‡∏•‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå {} []
        text = re.sub(r"[\{\}\[\]]", "", text)
        return text
    except Exception:
        # ‡∏ñ‡πâ‡∏≤ GPT ‡∏•‡πà‡∏° ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á base_reply ‡∏ï‡∏£‡∏á ‡πÜ
        return base_reply


def _find_candidates(user_message: str, records, threshold: float = 0.70):
    """
    ‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á/‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î + ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: list[{"name": str, "link": str, "score": float}]
    """
    u = _norm(user_message)
    candidates = []
    seen = set()  # ‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥

    for row in records:
        name = str(row.get("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "")).strip()
        link = str(row.get("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", "")).strip()
        kw_raw = str(row.get("‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î", ""))
        kws = [k.strip() for k in kw_raw.split(",") if k.strip()]

        # ‡∏£‡∏ß‡∏° "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß
        kws_plus = list(set(kws + ([name] if name else [])))

        best = 0.0
        direct_hit = False
        for kw in kws_plus:
            kw_norm = _norm(kw)
            if not kw_norm:
                continue

            # ‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö contains ‡∏Å‡πà‡∏≠‡∏ô (‡πÅ‡∏£‡∏á‡∏™‡∏∏‡∏î)
            if kw_norm in u or kw_norm == u:
                best = 1.0
                direct_hit = True
                break

            # ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
            sc = _similar(u, kw_norm)
            if sc > best:
                best = sc

        # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ú‡πà‡∏≤‡∏ô: ‡∏ï‡∏£‡∏á‡πÄ‡∏•‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á >= threshold
        if direct_hit or best >= threshold:
            key = name or link
            if key and key not in seen:
                seen.add(key)
                candidates.append({"name": name or "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "link": link, "score": best})

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢
    candidates.sort(key=lambda x: x["score"], reverse=True)
    return candidates


# ---------- Routes ----------
@app.route("/", methods=["GET"])
def home():
    return "‚úÖ FAQ Bot with GPT filter is running", 200


@app.route("/manychat", methods=["POST"])
def manychat():
    try:
        data = request.get_json(silent=True) or {}
        user_message = (data.get("message") or "").strip()
        if not user_message:
            return jsonify({"content": {"messages": [{"text": "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}]}}), 200

        # 1) ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡∏ó
        try:
            records = sheet.get_all_records()
        except Exception:
            # ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏µ‡∏ó‡∏•‡πà‡∏° ‚Üí ‡∏ï‡∏≠‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            fallback = "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πâ‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üôè ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏´‡∏°‡πâ‡∏≠‡∏´‡∏∏‡∏á‡∏Ç‡πâ‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡∏±‡πä‡∏Å‡πÑ‡∏ü"
            return jsonify({"content": {"messages": [{"text": fallback}]}}), 200

        # 2) ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        candidates = _find_candidates(user_message, records, threshold=0.70)

        # 3) ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (‡∏ú‡πà‡∏≤‡∏ô GPT filter)
        if len(candidates) == 0:
            # ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‚Üí ‡∏ä‡∏ß‡∏ô‡∏ö‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ú‡πà‡∏≤‡∏ô GPT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•)
            base = "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏´‡∏°‡πâ‡∏≠‡∏´‡∏∏‡∏á‡∏Ç‡πâ‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡∏±‡πä‡∏Å‡πÑ‡∏ü"
            reply_text = _rewrite_with_gpt(user_message, base)

        elif len(candidates) == 1:
            c = candidates[0]
            pname, link = c["name"], c["link"]
            if link:
                base = f"‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {pname} ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üëâ {link}"
            else:
                base = f"‡∏™‡∏ô‡πÉ‡∏à {pname} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ú‡∏°‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
            reply_text = _rewrite_with_gpt(user_message, base)

        elif 2 <= len(candidates) <= 4:
            items = "\n".join([f"- {c['name']} üëâ {c['link']}" if c['link'] else f"- {c['name']}" for c in candidates])
            base = f"‡πÄ‡∏£‡∏≤‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö üëá\n{items}\n\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
            reply_text = _rewrite_with_gpt(user_message, base)

        else:
            # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 4 ‡∏ä‡∏¥‡πâ‡∏ô ‚Üí ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÇ‡∏ä‡∏ß‡πå‡∏ä‡∏∑‡πà‡∏≠ top 5)
            names = "\n".join([f"- {c['name']}" for c in candidates[:5]])
            reply_text = (
                "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üòä\n"
                f"{names}\n\n"
                "‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ú‡∏°‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üôè"
            )

        # 4) ‡∏Å‡∏±‡∏ô‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏∏‡∏î {}[] ‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô
        reply_text = re.sub(r"[\{\}\[\]]", "", reply_text)

        return jsonify({"content": {"messages": [{"text": reply_text}]}}), 200

    except Exception:
        # ‡πÑ‡∏°‡πà‡πÇ‡∏ä‡∏ß‡πå error ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô
        safe_text = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ üôè ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö"
        return jsonify({"content": {"messages": [{"text": safe_text}]}}), 200


if __name__ == "__main__":
    # Render ‡∏à‡∏∞‡∏™‡πà‡∏á PORT ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô env ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
