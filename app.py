from flask import Flask, request, jsonify
import openai
import os
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from difflib import SequenceMatcher
import re

app = Flask(__name__)

# ==== OpenAI Client (‡πÉ‡∏´‡∏°‡πà) ====
openai.api_key = os.getenv("OPENAI_API_KEY")


# ==== Google Sheets ====
scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
gs_client = gspread.authorize(creds)

# ‡πÉ‡∏ä‡πâ SHEET_ID ‡∏à‡∏≤‡∏Å Environment Variable
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
sheet = gs_client.open_by_key(SHEET_ID).worksheet("FAQ")  # header: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ | ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö | ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î


def _norm(s: str) -> str:
    """Normalize ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    return re.sub(r"\s+", "", str(s)).lower()


def _gpt_message(user_message: str, context: str) -> str:
    """‡πÉ‡∏´‡πâ GPT ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û"""
    prompt = f"""
‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå: "{user_message}"
‡∏ö‡∏£‡∏¥‡∏ö‡∏ó: {context}

‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ 1-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
- ‡∏û‡∏π‡∏î‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
- ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á/‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á ‚Üí ‡∏¢‡πâ‡∏≥‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‚Üí ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ 1 ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‚Üí ‡∏™‡πà‡∏á‡∏•‡∏¥‡πâ‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
"""
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå ‡∏ï‡∏≠‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á"},
                {"role": "user", "content": prompt}
            ],
            temperature=0.6,
            max_tokens=200
        )
        return resp.choices[0].message.content.strip()
    except Exception:
        return context  # fallback


@app.route("/", methods=["GET"])
def home():
    return "‚úÖ FAQ Bot is running with Google Sheets", 200


@app.route("/manychat", methods=["POST"])
def manychat():
    try:
        data = request.get_json(silent=True) or {}
        user_message = (data.get("message") or "").strip()

        if not user_message:
            return jsonify({
                "content": {"messages": [{"text": "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}]}
            }), 200

        records = sheet.get_all_records()
        u = _norm(user_message)

        # --- Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á / ‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ / ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á ---
        trigger_words = ["‡∏™‡∏±‡πà‡∏á", "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", "cod", "‡∏£‡∏≤‡∏Ñ‡∏≤", "‡πÄ‡∏ó‡πà‡∏≤", "‡∏ö‡∏≤‡∏ó"]
        if any(t in user_message.lower() for t in trigger_words):
            reply_text = _gpt_message(
                user_message,
                "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏¥‡πâ‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏•‡∏¥‡πâ‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠"
            )
            return jsonify({"content": {"messages": [{"text": reply_text}]} }), 200

        # --- Step 2: ‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ match ---
        candidates = []
        for row in records:
            name = str(row.get("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "")).strip()
            link = str(row.get("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", "")).strip()
            kw_raw = str(row.get("‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î", ""))
            kws = [k.strip() for k in kw_raw.split(",") if k.strip()]
            kws_plus = list(set(kws + ([name] if name else [])))

            best = 0.0
            direct_hit = False
            for kw in kws_plus:
                if not kw:
                    continue
                if _norm(kw) in u:
                    direct_hit = True
                    best = 1.0
                    break
                score = SequenceMatcher(None, u, _norm(kw)).ratio()
                if score > best:
                    best = score

            if direct_hit or best >= 0.72:
                candidates.append({"name": name, "link": link})

        # --- Step 3: ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≠‡∏ö ---
        if len(candidates) == 0:
            # ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏¢ ‚Üí ‡∏ä‡∏ß‡∏ô‡∏™‡∏∏‡∏†‡∏≤‡∏û
            reply_text = _gpt_message(user_message, "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏ä‡∏ß‡∏ô‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

        elif len(candidates) == 1:
            # ‡πÄ‡∏à‡∏≠‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            c = candidates[0]
            context = f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {c['name']} ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡πâ‡∏á {c['link']}"
            reply_text = _gpt_message(user_message, context)

        elif 2 <= len(candidates) <= 3:
            # ‡πÄ‡∏à‡∏≠ 2-3 ‡∏ä‡∏¥‡πâ‡∏ô ‚Üí ‡∏™‡πà‡∏á‡∏•‡∏¥‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            items = "\n".join([f"- {c['name']} üëâ {c['link']}" for c in candidates])
            context = f"‡∏û‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:\n{items}"
            reply_text = _gpt_message(user_message, context)

        else:
            # ‡πÄ‡∏à‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô 3 ‚Üí ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            names = "\n".join([f"- {c['name']}" for c in candidates[:5]])
            context = f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n{names}\n‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡∏ä‡∏¥‡πâ‡∏ô"
            reply_text = _gpt_message(user_message, context)

        return jsonify({
            "content": {"messages": [{"text": reply_text}]}
        }), 200

    except Exception as e:
        return jsonify({
            "content": {"messages": [{"text": f"‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}]}
        }), 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
