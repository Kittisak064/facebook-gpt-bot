from flask import Flask, request, jsonify
from openai import OpenAI
import os
import gspread
from google.oauth2.service_account import Credentials
from fuzzywuzzy import fuzz  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á

app = Flask(__name__)

# ==== OpenAI Client ====
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ==== Google Sheets Auth (‡πÉ‡∏ä‡πâ google-auth ‡πÅ‡∏ó‡∏ô oauth2client) ====
scope = ["https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive"]

creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
gs_client = gspread.authorize(creds)

# ‡πÉ‡∏ä‡πâ SHEET_ID ‡∏à‡∏≤‡∏Å Environment Variable
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
sheet = gs_client.open_by_key(SHEET_ID).worksheet("FAQ")  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ó‡∏ä‡∏∑‡πà‡∏≠ FAQ

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ FAQ Bot is running with Google Sheets (auth fixed)", 200


@app.route("/manychat", methods=["POST"])
def manychat():
    try:
        data = request.get_json(silent=True) or {}
        user_message = data.get("message", "").strip()

        if not user_message:
            return jsonify({
                "content": {"messages": [{"text": "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}]}
            }), 200

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó (3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ | ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö | ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î)
        records = sheet.get_all_records()

        matched_products = []

        # üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
        for row in records:
            keywords = str(row["‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î"]).split(",")
            for kw in keywords:
                kw = kw.strip()
                if not kw:
                    continue
                if kw in user_message or fuzz.partial_ratio(kw, user_message) > 80:
                    matched_products.append(row)
                    break

        if len(matched_products) == 1:
            # ‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            product = matched_products[0]
            product_name = product["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]
            product_answer = product["‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"]

            reply_text = f"‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üôå {product_name}\nüëâ {product_answer}"

        elif len(matched_products) > 1:
            # ‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            product_names = [r["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"] for r in matched_products]
            reply_text = (
                f"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö üëá\n"
                + "\n".join([f"- {name}" for name in product_names])
                + "\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö? ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ üòä"
            )

        else:
            # ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
            reply_text = (
                "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö üòä "
                "‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏´‡∏°‡πâ‡∏≠‡∏´‡∏∏‡∏á‡∏Ç‡πâ‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡∏±‡πä‡∏Å‡πÑ‡∏ü?"
            )

        return jsonify({
            "content": {"messages": [{"text": reply_text}]}
        }), 200

    except Exception as e:
        return jsonify({
            "content": {"messages": [{"text": f"‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}]}
        }), 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
